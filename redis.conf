# Redis配置文件模板
#
# 注意:为了能读取到配置文件，Redis服务必须以配置文件的路径作为第一个参数启动
# ./redis-server /path/to/redis.conf

################################## NETWORK #####################################

# 默认情况下redis会在所有的可用网络接口中进行监听，如果你想让redis在指定的网络接口中
# 监听，那么可以使用bind 命令来指定redis的监听接口
#
# 例如:
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1 ::1
#
# ~~~ 警告 ~~~ 如果允许所有的网络接口访问Redis,这样做是很危险的,如果你只是需要本机访问 
# 可以指定特定的127.0.0.1,如果需要外网访问,请配置防火墙策略
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bind 0.0.0.0

# 是否开启保护模式，默认开启。要是配置里没有指定bind和密码。
# 开启该参数后,redis只会本地进行访问,拒绝外部访问。
# 要是开启了密码和bind,可以开启。否则最好关闭，设置为no。
protected-mode no

# 在指定的端口上进行监听，默认是 6379
# 如果端口设置为0，那么redis就不会在TCP socket上进行监听
port 6379

# TCP listen() backlog.
#
# 在一个并发量高的环境中，你需要指定一个比较大的backlog值来避免慢连接的情况
# 注意，linux内核会默认 使用/proc/sys/net/core/somaxconn 的值来削减 backlog的实际值，
# 因此你需要确保提升 somaxconn 和 tcp_max_syn_backlog 这两个值来确保此处的backlog生效
tcp-backlog 1000

# Unix socket.
#
# 指定unix sock的路径来进行连接监听，默认是不指定，因此redis不会在unix socket上进行监听
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# 关闭掉空闲N秒的连接（0则是不处理空闲连接）
timeout 0

# TCP keepalive.
#
# 如果该值不为0，将使用 SO_KEEPALIVE 这一默认的做法来向客户端连接发送TCP ACKs 
#
# 这样的好处有以下两个原因
# 1）检测已经死亡的对端（译者注：TCP的关闭会存在无法完成4次握手的情况，如断电，断网，数据丢失等等）
# 2）保持连接在网络环境中的存活
#
tcp-keepalive 0

################################# GENERAL #####################################

# redis默认不是以一个守护进程来运行的，使用 yes，可以让redis作为守护进程来运行
# 注意：当redis作为守护进程的时候 /var/run/redis.pid 作为 pid 文件
# 如果使用docker 设置该参数为no
daemonize no

# 3.2新增的参数，不懂
supervised no

# 当redis以守护进程运行时，将会使用/var/run/redis.pid作为 pid文件的位置
pidfile /var/run/redis.pid

# 指定日志的记录级别的
# 可以是如下的几个值之一
# debug (尽可能多的日志信息，用于开发和测试之中)
# verbose (少但是有用的信息, 没有debug级别那么混乱)
# notice (适量的信息，用于生产环境)
# warning (只有非常重要和关键的信息会被记录)
loglevel notice

# 指定日志文件的位置. 为空时将输出到标准输出设备
# 如果你在demo模式下使用标准输出的日志，日志将会输出到 /dev/null
logfile redis.log

# 当设置 'syslog-enabled'为 yes时， 允许记录日志到系统日志中。
# 以及你可以使用更多的日志参数来满足你的要求
# syslog-enabled no

# 指定在系统日志中的身份
# syslog-ident redis

# 指定系统日志的能力. 必须是 LOCAL0 到 LOCAL7 之间（闭区间）.
# syslog-facility local0

# 设置数据库的数量. 默认的数据库是DB 0 使得你可以在每一个连接的基础之上使用 
# SELECT <dbid> 来指定另外的数据库，但是这个值必须在 0到 'database'-1之间
databases 16

################################ SNAPSHOTTING  ################################
#
# 保存 DB 到硬盘:
#
# save <seconds> <changes>
#
# 将会在<seconds> 和 <changes>两个值同时满足时，将DB数据保存到硬盘中
# 其中<seconds> 每多少秒，<changes>是改变的key的数量
#
# 在以下的例子中，将会存在如下的行为
# 当存在最少一个key 变更时，900秒(15分钟)后保存到硬盘
# 当存在最少10个key变更时，300秒后保存到硬盘
# 当存在最少1000个key变更时，60秒后保存到硬盘
#
# 提示: 你可以禁用如下的所有 save 行
#
# 你可以删除所有的save然后设置成如下这样的情况
#
# save ""

save 900 1
save 300 10
save 60 10000

# 作为默认，redis会在RDB快照开启和最近后台保存失败的时候停止接受写入(最少一个保存点)
# 这会使得用户察觉（通常比较困难）到数据不会保持在硬盘上的正确性，否则很难发现
# 这些灾难会发生，如果后台保存程序再次开始工作，reidis会再次自动允许写入
# 然而如果对redis服务器设置了合理持续的监控，那么你可以关闭掉这个选项。
# 这会导致redis将继续进行工作，无论硬盘，权限或者其他的是否有问题
stop-writes-on-bgsave-error no

# 是否在dump到 rdb 数据库的时候使用LZF来压缩字符串
# 默认是 yes，因为这是一个优良的做法
# 如果你不想耗费你的CPU处理能力，你可以设置为 no，但是这会导致你的数据会很大
rdbcompression yes

# 从RDB的版本5开始，CRC64校验值会写入到文件的末尾
# 这会使得格式化过程中，使得文件的完整性更有保障，
# 但是这会在保存和加载的时候损失不少的性能(大概在10%)
# 你可以关闭这个功能来获得最高的性能
#
# RDB文件会在校验功能关闭的时候，使用0来作为校验值，这将告诉加载代码来跳过校验步骤
rdbchecksum yes

# DB的文件名称
dbfilename dump.rdb

# 工作目录.
#
# DB将会使用上述 'dbfilename'指定的文件名写入到该目录中
# 
# 追加的文件也会在该目录中创建
# 
# 注意，你应该在这里输入的是一个目录而不是一个文件名
dir ./

################################# REPLICATION #################################

# 主从复制。使用 slaveof 命令来 指导redis从另一个redis服务的拷贝中来创建一个实例
#
# 注意：这个配置是主从结构的从（主从结构的从，怎么那么拗口呢）redis的本地配置
#
# 如下例子，这个配置指导 slave (从redis) 
# 通过另一个redis的实例的ip和端口号来获取DB数据
#
# slaveof <masterip> <masterport>

# 如果主服务器开启了密码保护(使用下面的"requirepass"配置)
# 这个配置就是告诉从服务在发起向主服务器的异步复制的请求之前使用如下的密码进行认证，
# 否则主服务器会拒绝这个请求
#
# masterauth <master-password>

# 如果从服务器失去了和主服务器之间的连接，或者当复制仍然处于处理状态的时候
# 从服务器做出如下的两个行为
#
# 1）如果 slave-serve-stale-data 被设置为 yes(默认值)，从服务器将会持续
# 回复来自客户端的请求，可能会回复已经过期的数据，
# 或者返回空的数据，当从服务器第一次异步请求数据时。
#
# 2）如果 slave-serve-stale-data 被设置为 no ，
# 从服务器就会返回"SYNC with master in progress"
# 这个错误，来应答所有命令除了 INFO 和 SLAVEOF
#
slave-serve-stale-data yes

# 你可以配置一个从服务器的实例是否接受写请求，
# 从服务器在存储一些短暂的数据的的时候，接收写请求是一件非常正确的事情
# （因为数据在向主服务器同步之后非常容易擦除）但是会因为配置不正确而导致一些问题
#
# 从redis 2.6开始默认从服务器是只读的服务器
#
# 提示：只读的从服务器并不是设计用来公开给不受信任的互联网客户端的，它
# 仅仅是一个用来防止对实例进行误操作的保护层。只读从服务器默认用来输出管理命令
# 例如 CONFIG, DEBUG 和其他。如果你想限制它的规模，你可以使用'rename-command'来
# 提高它的安全性，使得她作为一个影子来执行管理或者危险的命令
slave-read-only yes

# 是否使用socket方式复制数据。目前redis复制提供两种方式，disk和socket。
# 如果新的slave连上来或者重连的slave无法部分同步，
# 就会执行全量同步，master会生成rdb文件。
# 有2种方式：disk方式是master创建一个新的进程把rdb文件保存到磁盘，
# 再把磁盘上的rdb文件传递给slave。socket是master创建一个新的进程，
# 直接把rdb文件以socket的方式发给slave。disk方式的时候，当一个rdb保存的过程中，
# 多个slave都能共享这个rdb文件。socket的方式就的一个个slave顺序复制。
# 在磁盘速度缓慢，网速快的情况下推荐用socket方式。
repl-diskless-sync no

# diskless复制的延迟时间，防止设置为0。一旦复制开始，
# 节点不会再接收新slave的复制请求直到下一个rdb传输。
# 所以最好等待一段时间，等更多的slave连上来。
repl-diskless-sync-delay 5

# slave根据指定的时间间隔向服务器发送ping请求。
# 时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。
# 
# repl-ping-slave-period 10

# 复制连接超时时间。master和slave都有超时时间的设置。
# master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。
# slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。
# 需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，
# 不然会经常检测到超时。
#
# repl-timeout 60

# 是否禁止复制tcp链接的tcp nodelay参数，可传递yes或者no。默认是no，即使用tcp nodelay。
# 如果master设置了yes来禁止tcp nodelay设置，在把数据复制给slave的时候，
# 会减少包的数量和更小的网络带宽。但是这也可能带来数据的延迟。默认我们推荐更小的延迟，
# 但是在数据量传输很大的场景下，建议选择yes。
repl-disable-tcp-nodelay no

# 复制缓冲区大小，这是一个环形复制缓冲区，用来保存最新复制的命令。
# 这样在slave离线的时候，不需要完全复制master的数据，如果可以执行部分同步，
# 只需要把缓冲区的部分数据复制给slave，就能恢复正常复制状态。缓冲区的大小越大，
# slave离线的时间可以更长，复制缓冲区只有在有slave连接的时候才分配内存。
# 没有slave的一段时间，内存会被释放出来，默认1m。
#
# repl-backlog-size 1mb

# master没有slave一段时间会释放复制缓冲区的内存，
# repl-backlog-ttl用来设置该时间长度。单位为秒。
#
# repl-backlog-ttl 3600

# 当master不可用，Sentinel会根据slave的优先级选举一个master。
# 最低的优先级的slave，当选master。而配置成0，永远不会被选举。
slave-priority 100

# redis提供了可以让master停止写入的方式，如果配置了min-slaves-to-write，
# 健康的slave的个数小于N，mater就禁止写入。
# master最少得有多少个健康的slave存活才能执行写命令。
# 这个配置虽然不能保证N个slave都一定能接收到master的写操作，
# 但是能避免没有足够健康的slave的时候，master不能写入来避免数据丢失。
# 设置为0是关闭该功能。
#
# min-slaves-to-write 3

# 延迟小于min-slaves-max-lag秒的slave才认为是健康的slave。
# min-slaves-max-lag 10
#
# 设置1或另一个设置为0禁用这个特性。
# min-slaves-max-lag is set to 10.

################################## SECURITY ###################################

# 该配置可以让用户使用AUTH命令来认证密码，才能使用其他命令。
# 这让redis可以使用在不受信任的网络中。为了保持向后的兼容性，可以注释该命令，
# 因为大部分用户也不需要认证。使用这个配置的时候需要注意，因为redis太快了，
# 每秒可以认证15w次密码，简单的密码很容易被攻破，所以最好使用一个更复杂的密码。
#
# requirepass 123456

# Command renaming.
#
# 把危险的命令给修改成其他名称。比如CONFIG命令可以重命名为一个很难被猜到的命令，
# 这样用户不能使用，而内部工具还能接着使用。
# 例如
# 
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# 设置成一个空的值，可以禁止一个命令
# rename-command CONFIG ""

################################### LIMITS ####################################

# 设置能连上redis的最大客户端连接数量。默认是10000个客户端连接。
# 由于redis不区分连接是客户端连接还是内部打开文件或者和slave连接等，
# 所以maxclients最小建议设置到32。如果超过了maxclients，
# redis会给新的连接发送’max number of clients reached’，并关闭连接。
#
# maxclients 10000

# redis配置的最大内存容量。当内存满了，需要配合maxmemory-policy策略进行处理。
# 注意slave的输出缓冲区是不计算在maxmemory内的。所以为了防止主机内存使用完，
# 建议设置的maxmemory需要更小一些。
#
# maxmemory <bytes>

# 内存容量超过maxmemory后的处理策略。
#     volatile-lru：利用LRU算法移除设置过过期时间的key。
#     volatile-random：随机移除设置过过期时间的key。
#     volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）
#     allkeys-lru：利用LRU算法移除任何key。
#     allkeys-random：随机移除任何key。
#     noeviction：不移除任何key，只是返回一个写错误。
# 上面的这些驱逐策略，如果redis没有合适的key驱逐，对于写命令，还是会返回错误。
# redis将不再接收写请求，只接收get请求。写命令包括：set setnx
#
# maxmemory-policy noeviction

# lru检测的样本数。使用lru或者ttl淘汰算法，从需要淘汰的列表中随机选择sample个key，
# 选出闲置时间最长的key移除。
#
# maxmemory-samples 5

############################## APPEND ONLY MODE ###############################

# 默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。
# 但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，
# Append Only File是另一种持久化方式，可以提供更好的持久化特性。
# Redis会把每次写入的数据在接收后都写入 appendonly.aof 文件，
# 每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。
appendonly yes

# aof文件名(default: "appendonly.aof")
appendfilename "appendonly.aof"

# aof持久化策略的配置
# no 表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。
# always 表示每次写入都执行fsync，以保证数据同步到磁盘。
# everysec 表示每秒执行一次fsync，可能会导致丢失这1s数据。
appendfsync everysec

# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，
# 执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。
# 如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，
# 这样对持久化特性来说这是更安全的选择。设置为yes表示rewrite期间对新写操作不fsync,
# 暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。
# Linux的默认fsync策略是30秒。可能丢失30秒数据。
no-appendfsync-on-rewrite no

# aof自动重写配置。当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，
# 即当aof文件增长到一定大小的时候Redis能够调用bgrewriteaof对日志文件进行重写。
# 当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，
# 自动启动新的日志重写过程。
auto-aof-rewrite-percentage 100
# 设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写
auto-aof-rewrite-min-size 64mb

# aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。
# 重启可能发生在redis所在的主机操作系统宕机后，
# 尤其在ext4文件系统没有加上data=ordered选项（redis宕机或者异常终止不会造成尾部不完整现象。）
# 出现这种现象，可以选择让redis退出，或者导入尽可能多的数据。如果选择的是yes，
# 当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。
# 如果是no，用户必须手动redis-check-aof修复AOF文件才可以。
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################

# Lua脚本的最大超时时间.
#
# 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。
# 当一个脚本超过了最大时限。只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。
# 第一个可以杀没有调write命令的东西。要是已经调用了write，只能用第二个命令杀。
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################
#
# 集群开关，默认是不开启集群模式。
#
# cluster-enabled yes

# 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。
# 这个文件并不需要手动配置，这个配置文件有Redis生成并更新，
# 每个Redis集群节点需要一个单独的配置文件，请确保与实例运行的系统中配置文件名称不冲突
#
# cluster-config-file nodes-6379.conf

# 节点互连超时的阀值。集群节点超时毫秒数
#
# cluster-node-timeout 15000

# 在进行故障转移的时候，全部slave都会请求申请为master，
# 但是有些slave可能与master断开连接一段时间了，导致数据过于陈旧，
# 这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。
# 判断方法是：
# 比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period
# 如果节点超时时间为三十秒, 并且slave-validity-factor为10,
# 假设默认的repl-ping-slave-period是10秒，即如果超过310秒slave将不会尝试进行故障转移
#
# cluster-slave-validity-factor 10

# master的slave数量大于该值，slave才能迁移到其他孤立master上，
# 如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。
#
# cluster-migration-barrier 1

# 默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。
# 设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，
# 小分区的master一直在接受写请求，而造成很长时间数据不一致。
#
# cluster-require-full-coverage yes

################################## SLOW LOG ###################################

# slog log是用来记录redis运行中执行比较慢的命令耗时。
# 当命令的执行超过了指定时间，就记录在slow log中，slog log保存在内存中，所以没有IO操作。
# 执行时间比slowlog-log-slower-than大的请求记录到slowlog里面，
# 单位是微秒，所以1000000就是1秒。
# 注意，负数时间会禁用慢查询日志，而0则会强制记录所有命令。
slowlog-log-slower-than 10000

# 慢查询日志长度。当一个新的命令被写进日志的时候，最老的那个记录会被删掉。
# 这个长度没有限制。只要有足够的内存就行。你可以通过 SLOWLOG RESET 来释放内存。
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# 延迟监控功能是用来监控redis中执行比较缓慢的一些操作，
# 用LATENCY打印redis实例在跑命令时的耗时图表。只记录大于等于下边设置的值的操作。
# 0的话，就是关闭监视。默认延迟监控功能是关闭的，
# 如果你需要打开，也可以通过CONFIG SET命令动态设置。
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

# 键空间通知使得客户端可以通过订阅频道或模式，来接收那些以某种方式改动了 Redis 数据集的事件。
# 因为开启键空间通知功能需要消耗一些 CPU ，所以在默认配置下，该功能处于关闭状态。
# notify-keyspace-events 的参数可以是以下字符的任意组合，
# 它指定了服务器该发送哪些类型的通知：
# K 键空间通知，所有通知以 __keyspace@__ 为前缀
# E 键事件通知，所有通知以 __keyevent@__ 为前缀
# g DEL 、 EXPIRE 、 RENAME 等类型无关的通用命令的通知
# $ 字符串命令的通知
# l 列表命令的通知
# s 集合命令的通知
# h 哈希命令的通知
# z 有序集合命令的通知
# x 过期事件：每当有过期键被删除时发送
# e 驱逐(evict)事件：每当有键因为 maxmemory 政策而被删除时发送
# A 参数 g$lshzxe 的别名
# 输入的参数中至少要有一个 K 或者 E，否则的话，不管其余的参数是什么，都不会有任何 通知被分发。
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# 数据量小于等于hash-max-ziplist-entries的用ziplist，
# 大于hash-max-ziplist-entries用hash
# value大小小于等于hash-max-ziplist-value的用ziplist，
# 大于hash-max-ziplist-value用hash。
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# Lists are also encoded in a special way to save a lot of space.
# The number of entries allowed per internal list node can be specified
# as a fixed maximum size or a maximum number of elements.
# For a fixed maximum size, use -5 through -1, meaning:
# -5: max size: 64 Kb  <-- not recommended for normal workloads
# -4: max size: 32 Kb  <-- not recommended
# -3: max size: 16 Kb  <-- probably not recommended
# -2: max size: 8 Kb   <-- good
# -1: max size: 4 Kb   <-- good
# Positive numbers mean store up to _exactly_ that number of elements
# per list node.
# The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),
# but if your use case is unique, adjust the settings as necessary.
list-max-ziplist-size -2

# Lists may also be compressed.
# Compress depth is the number of quicklist ziplist nodes from *each* side of
# the list to *exclude* from compression.  The head and tail of the list
# are always uncompressed for fast push/pop operations.  Settings are:
# 0: disable all list compression
# 1: depth 1 means "don't start compressing until after 1 node into the list,
#    going from either the head or tail"
#    So: [head]->node->node->...->node->[tail]
#    [head], [tail] will always be uncompressed; inner nodes will compress.
# 2: [head]->[next]->node->node->...->node->[prev]->[tail]
#    2 here means: don't compress head or head->next or tail->prev or tail,
#    but compress all nodes between them.
# 3: [head]->[next]->[next]->node->node->...->node->[prev]->[prev]->[tail]
# etc.
list-compress-depth 0

# 数据量小于等于set-max-intset-entries用iniset，
# 大于set-max-intset-entries用set。
set-max-intset-entries 512

# 数据量小于等于zset-max-ziplist-entries用ziplist，
# 大于zset-max-ziplist-entries用zset
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# value大小小于等于hll-sparse-max-bytes使用稀疏数据结构（sparse），
# 大于hll-sparse-max-bytes使用稠密的数据结构（dense）。
# 一个比16000大的value是几乎没用的，建议的value大概为3000。
# 如果对CPU要求不高，对空间要求较高的，建议设置到10000左右。
hll-sparse-max-bytes 3000

# Redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。
# 当你的使用场景中，有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，
# 把这项配置为no。如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。
activerehashing yes

# 对客户端输出缓冲进行限制可以强迫那些不从服务器读取数据的客户端断开连接，
# 用来强制关闭传输缓慢的客户端。
# 对于normal client，第一个0表示取消hard limit，
# 第二个0和第三个0表示取消soft limit，normal client默认取消限制，因为如果没有寻问，他们是不会接收数据的。
client-output-buffer-limit normal 0 0 0

# 对于slave client和MONITER client，如果client-output-buffer一旦超过256mb，
# 又或者超过64mb持续60秒，那么服务器就会立即断开客户端连接。
client-output-buffer-limit slave 256mb 64mb 60

# 对于pubsub client，如果client-output-buffer一旦超过32mb，
# 又或者超过8mb持续60秒，那么服务器就会立即断开客户端连接。
client-output-buffer-limit pubsub 32mb 8mb 60

# redis执行任务的频率为1s除以hz。
hz 10

# 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，
# 系统会每32MB执行一次fsync。这对于把文件写入磁盘是有帮助的，可以避免过大的延迟峰值。
aof-rewrite-incremental-fsync yes
